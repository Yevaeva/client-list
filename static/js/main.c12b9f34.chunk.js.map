{"version":3,"sources":["helperFunc/request.js","store/actions.js","store/actionTypes.js","components/providerList/ProviderList.js","components/addClient/AddClient.js","components/confirm/Confirm.js","components/editClientModal/EditClientModal.js","components/search/Search.js","components/clients/Clients.js","components/spinner/Spinner.js","App.js","reportWebVitals.js","store/reducer.js","store/store.js","index.js"],"names":["request","apiUrl","url","method","body","config","headers","JSON","stringify","fetch","then","res","json","response","error","ERROR","LOADING","GET_CLIENTS_SUCCESS","GET_PROVIDERS_SUCCESS","ADD_PROVIDER_SUCCESS","ADD_CLIENT_SUCCESS","EDIT_CLIENT_SUCCESS","EDIT_PROVIDER_SUCCESS","REMOVE_PROVIDER_SUCCESS","REMOVE_CLIENT_SUCCESS","getClients","data","query","key","dispatch","type","actionTypes","clientList","catch","errorMessage","message","addProvider","provider","ProviderList","state","checkbox","edit","inputValue","props","name","handleCheck","e","setState","handleKeyDown","event","_id","editProvider","this","checkedProvider","includes","className","id","onChange","checked","value","target","onKeyDown","htmlFor","onClick","icon","faEdit","color","removeProvider","faTrash","React","Component","mapDispatchToProps","editedProvider","connect","providerList","AddClient","handleChange","selectedProviders","Set","has","delete","add","newProvider","reapeted","find","prov","trim","undefined","toast","addClient","email","phone","test","providers","map","p","onClose","inputRef","createRef","current","focus","Modal","dialogClassName","centered","show","onHide","Header","closeButton","Title","Body","ref","placeholder","Button","Footer","variant","PureComponent","client","Confirm","handleClose","removeClient","EditClientModal","editChangeHandler","editClient","toggleConfirm","showConfirm","editedClient","useState","search","setSearch","sort","setSort","handleSubmit","InputGroup","FormControl","aria-label","aria-describedby","Append","faSearch","options","label","isClearable","isSearchable","Clients","toggleNewClientModal","openNewClientModal","getProviders","toggleEdit","Table","striped","bordered","hover","colSpan","join","addClientSuccess","editClientSuccess","Spinner","successMessage","loading","success","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","editProviderSuccess","addProviderSuccess","middlewareArr","thunk","middleware","applyMiddleware","store","createStore","action","clients","newProviders","filter","item","i","length","boolArr","index","indexOf","splice","newClients","newClientIndex","findIndex","newProviderIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c12b9f34.chunk.js","sourcesContent":["\r\nfunction request(url, method = \"GET\", body) {\r\n    let config =\r\n    {\r\n      method: method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n    }\r\n    if (body) {\r\n      config.body = JSON.stringify(body)\r\n    }\r\n    return fetch(url, config)\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        if (response.error) {\r\n          throw response.error\r\n        }\r\n        return response\r\n      })\r\n  }\r\n  \r\n  export default request","import request from \"../helperFunc/request\"\r\nimport * as actionTypes from './actionTypes'\r\n\r\n\r\nlet apiUrl \r\nif (process.env.NODE_ENV === 'development') {\r\n    apiUrl = process.env.REACT_APP_API_URL\r\n} else {\r\n    apiUrl = 'https://client-list-api.herokuapp.com'\r\n}\r\n\r\n\r\nexport const getClients = (data = {}) => {\r\n    let url = `${apiUrl}/client`;\r\n    let query = '?';\r\n    for (let key in data) {\r\n        query = `?${key}=${data[key]}&`\r\n    }\r\n    if (query === '?') query = ''\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(url + query)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.GET_CLIENTS_SUCCESS, clientList: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const getProviders = () => {\r\n\r\n    let url = `${apiUrl}/provider`;\r\n\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(url)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.GET_PROVIDERS_SUCCESS, providerList: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addProvider = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider`, \"POST\", data)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.ADD_PROVIDER_SUCCESS, provider: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\nexport const addClient = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client`, \"POST\", data)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.ADD_CLIENT_SUCCESS, client: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\nexport const editClient = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client/${data._id}`, \"PUT\", data)\r\n            .then((editedClient) => {\r\n                dispatch({ type: actionTypes.EDIT_CLIENT_SUCCESS, client: editedClient })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const editProvider = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider/${data._id}`, \"PUT\", data)\r\n            .then((editedProvider) => {\r\n                dispatch({ type: actionTypes.EDIT_PROVIDER_SUCCESS, provider: editedProvider })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeProvider = (provider) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider/${provider._id}`, \"DELETE\")\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.REMOVE_PROVIDER_SUCCESS, provider })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeClient = (id) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client/${id}`, \"DELETE\")\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.REMOVE_CLIENT_SUCCESS, id })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}","export const ERROR = \"ERROR\";\r\nexport const LOADING = \"LOADING\";\r\nexport const GET_CLIENTS_SUCCESS = \"GET_CLIENTS_SUCCESS\";\r\nexport const GET_PROVIDERS_SUCCESS = \"GET_PROVIDERS_SUCCESS\";\r\nexport const ADD_PROVIDER_SUCCESS = 'ADD_PROVIDER_SUCCESS';\r\nexport const ADD_CLIENT_SUCCESS = 'ADD_CLIENT_SUCCESS';\r\nexport const EDIT_CLIENT_SUCCESS = 'EDIT_CLIENT_SUCCESS';\r\nexport const EDIT_PROVIDER_SUCCESS = 'EDIT_PROVIDER_SUCCESS';\r\nexport const REMOVE_PROVIDER_SUCCESS = 'REMOVE_PROVIDER_SUCCESS';\r\nexport const REMOVE_CLIENT_SUCCESS = 'REMOVE_CLIENT_SUCCESS'\r\n","import React from 'react'\r\nimport './ProviderList.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { editProvider, getClients, removeProvider } from '../../store/actions';\r\n\r\n\r\n\r\nclass ProviderList extends React.Component {\r\n\r\n    state = {\r\n        checkbox: false,\r\n        edit: false,\r\n        inputValue: this.props.provider.name\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.checkedProvider && this.props.checkedProvider.includes(this.props.provider.name)) {\r\n            this.setState({\r\n                checkbox: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                checkbox: false\r\n            })\r\n        }\r\n    }\r\n    handleCheck = (e) => {\r\n        this.props.handleCheck(e)\r\n        this.setState({\r\n            checkbox: !this.state.checkbox\r\n        })\r\n    }\r\n\r\n    handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            const data = {\r\n                name: this.state.inputValue,\r\n                _id: this.props.provider._id\r\n            }\r\n            this.props.editProvider(data)\r\n            this.setState({\r\n                edit: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { provider } = this.props\r\n\r\n        return (\r\n            <div className='provWrapper' key={provider._id}>\r\n                <div className='provName'>\r\n                    <input\r\n                        name={provider.name}\r\n                        type=\"checkbox\"\r\n                        id={provider.name}\r\n                        onChange={(e) => this.handleCheck(e)}\r\n                        checked={this.state.checkbox}\r\n                    />\r\n                    {\r\n                        this.state.edit ?\r\n                            <input className='editInput'\r\n                                type='text'\r\n                                value={this.state.inputValue}\r\n                                onChange={(e) => this.setState({ inputValue: e.target.value })}\r\n                                onKeyDown={this.handleKeyDown}\r\n                            /> :\r\n                            <label htmlFor={provider.name}>\r\n                                {provider.name}\r\n                            </label>\r\n\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={() => this.setState({ edit: !this.state.edit })}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEdit} color='#210794' />\r\n\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.props.removeProvider(provider)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrash} color='#ce0f0f' />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        providerList: state.providerList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    editProvider,\r\n    removeProvider,\r\n    getClients\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProviderList)","import React, { createRef } from 'react'\r\nimport './AddClient.scss'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport { connect } from 'react-redux';\r\nimport { addClient, addProvider } from '../../store/actions';\r\nimport { toast } from \"react-toastify\"\r\nimport ProviderList from '../providerList/ProviderList';\r\n\r\n\r\nclass AddClient extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = createRef()\r\n\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            newProvider: '',\r\n            selectedProviders: new Set(),\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus()\r\n    }\r\n\r\n    handleChange = (event, type) => {\r\n        this.setState({\r\n            [type]: event.target.value,\r\n        })\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        const selectedProviders = new Set(this.state.selectedProviders);\r\n        if (selectedProviders.has(e.target.name)) {\r\n            selectedProviders.delete(e.target.name)\r\n        } else {\r\n            selectedProviders.add(e.target.name)\r\n\r\n        }\r\n        this.setState({\r\n            selectedProviders,\r\n\r\n        })\r\n    }\r\n\r\n\r\n    addProvider = () => {\r\n        let { newProvider } = this.state\r\n        let { providerList } = this.props\r\n        let reapeted = providerList.find((prov) => {\r\n            return prov.name === newProvider\r\n        })\r\n\r\n        if (newProvider.trim() && reapeted === undefined) {\r\n            this.props.addProvider({ name: this.state.newProvider.trim() })\r\n            this.setState({\r\n                newProvider: '',\r\n            })\r\n        }\r\n        else if (reapeted) {\r\n            toast.error(\"Provider must be unique ❗❗❗\")\r\n        }\r\n\r\n    }\r\n\r\n    addClient = () => {\r\n        const regexp =/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n        const reg = /^\\d+$/\r\n        let { email, name, phone } = this.state\r\n\r\n        if (email && !regexp.test(email)) {\r\n            toast.error(\"Write valid email address ❗❗❗\")\r\n            return\r\n        }\r\n        else if (phone && !reg.test(phone)) {\r\n            toast.error(\"Phone must contain only numbers ❗❗❗\")\r\n            return\r\n\r\n        }\r\n        else if (!name || !email || !phone) {\r\n            toast.error(\"All fields marked with * are required ❗❗❗\")\r\n            return\r\n        }\r\n        let providers = [...this.state.selectedProviders].map((p) => {\r\n            return { name: p }\r\n        }\r\n        )\r\n        let data = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            phone: + this.state.phone,\r\n            providers\r\n        }\r\n        this.props.addClient(data)\r\n        this.props.onClose()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let onClose = this.props.onClose\r\n        return (\r\n            <div>\r\n                <Modal dialogClassName=\"size\"\r\n centered show={true} onHide={onClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add new Client</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"inputs\">\r\n                            <input ref={this.inputRef}\r\n                                type='text'\r\n                                placeholder='Name *'\r\n                                value={this.state.name}\r\n                                onChange={(event) => this.handleChange(event, 'name')}\r\n\r\n                            />\r\n                            <input\r\n                                type='email'\r\n                                placeholder='Email *'\r\n                                value={this.state.email}\r\n                                onChange={(event) => this.handleChange(event, 'email')}\r\n\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='Phone *'\r\n                                value={this.state.phone}\r\n                                onChange={(event) => this.handleChange(event, 'phone')}\r\n\r\n                            />\r\n                            <div className='addProvider'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='Providers'\r\n                                    value={this.state.newProvider}\r\n                                    onChange={(event) => this.handleChange(event, 'newProvider')}\r\n\r\n                                />\r\n                                <Button\r\n                                    onClick={this.addProvider}\r\n\r\n                                >Add provider</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='providerList'>\r\n                            {\r\n                                this.props.providers.map((provider) => {\r\n                                    return (\r\n                                        <div key={provider._id}>\r\n                                            <ProviderList\r\n                                                provider={provider}\r\n                                                handleCheck={this.handleCheck}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n\r\n                            }\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                        <Button variant=\"danger\"\r\n                            className='butn'\r\n                            onClick={onClose}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"primary\"\r\n                            onClick={this.addClient}\r\n                        >\r\n                            Add Client\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        providerList: state.providerList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addProvider,\r\n    addClient\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddClient)","import { Modal, Button } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function Confirm(props) {\r\n\r\n\r\n  return (\r\n\r\n    <Modal centered show={true} onHide={props.handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Are you sure you want to delete client?</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Footer>\r\n        <Button\r\n          onClick={props.handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          variant=\"danger\"\r\n          onClick={props.removeClient}>\r\n          Delete\r\n                  </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n\r\n}\r\n\r\nConfirm.propTypes = {\r\n  removeClient: PropTypes.func.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { toast } from \"react-toastify\"\r\nimport { addProvider, editClient, removeClient } from '../../store/actions';\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport ProviderList from '../providerList/ProviderList';\r\nimport Confirm from '../confirm/Confirm';\r\n\r\n\r\n\r\nclass EditClientModal extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.inputRef = React.createRef();\r\n    this.state = {\r\n      ...this.props.client,\r\n      showConfirm: false,\r\n      selectedProviders: new Set(),\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus()\r\n    this.setState({\r\n      selectedProviders: new Set([...this.state.providers.map((checked) => checked.name)])\r\n    })\r\n  }\r\n\r\n  editChangeHandler = (event, type) => {\r\n\r\n    this.setState({\r\n      [type]: event.target.value\r\n    })\r\n  }\r\n\r\n  addProvider = () => {\r\n    let { newProvider } = this.state\r\n    let { providerList } = this.props\r\n    let reapeted = providerList.find((prov) => {\r\n      return prov.name === newProvider\r\n    })\r\n\r\n    if (newProvider.trim() && reapeted === undefined) {\r\n      this.props.addProvider({ name: this.state.newProvider.trim() })\r\n      this.setState({\r\n        newProvider: '',\r\n      })\r\n    }\r\n    else if (reapeted) {\r\n      toast.error(\"Provider must be unique ❗❗❗\")\r\n    }\r\n\r\n  }\r\n\r\n\r\n  handleCheck = (e) => {\r\n    const selectedProviders = new Set(this.state.selectedProviders);\r\n    if (selectedProviders.has(e.target.name)) {\r\n      selectedProviders.delete(e.target.name)\r\n    } else {\r\n      selectedProviders.add(e.target.name)\r\n    }\r\n\r\n    this.setState({\r\n      selectedProviders,\r\n\r\n    })\r\n  }\r\n\r\n  editClient = () => {\r\n    let { email, name, phone } = this.state\r\n\r\n    if(!email || !name || !phone){\r\n      toast.error(\"All fields marked with * are required ❗❗❗\")\r\n      return\r\n    };\r\n    const regexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n    const reg = /^\\d+$/\r\n\r\n    if (email && !regexp.test(email)){\r\n        toast.error(\"Write valid email address ❗❗❗\")\r\n        return\r\n    }\r\n    else if(phone && !reg.test(phone)){\r\n        toast.error(\"Phone must contain only numbers ❗❗❗\")\r\n        return\r\n\r\n    }\r\n    else if(!name || !email || !phone){\r\n        toast.error(\"All fields marked with * are required ❗❗❗\")\r\n        return\r\n    }\r\n    \r\n      const providers = [...this.state.selectedProviders].map(p=>{\r\n        return {name:p}\r\n      })\r\n      const data = {\r\n        name: this.state.name,\r\n        email: this.state.email,\r\n        phone: this.state.phone,\r\n        _id: this.state._id,\r\n        providers\r\n      }\r\n      this.props.editClient(data)\r\n\r\n      this.props.onClose()\r\n \r\n    \r\n  }\r\n\r\n  toggleConfirm = () => {\r\n    this.setState({\r\n      showConfirm: !this.state.showConfirm,\r\n    })\r\n  }\r\n\r\n  removeClient = () => {\r\n    this.props.removeClient(this.state._id)\r\n    this.toggleConfirm()\r\n    this.props.onClose()\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal centered show={true} onHide={this.props.onClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Edit Client</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"inputs\">\r\n              <input ref={this.inputRef}\r\n                type='text'\r\n                placeholder='Name *'\r\n                value={this.state.name}\r\n                onChange={(event) => this.editChangeHandler(event, 'name')}\r\n           \r\n              />\r\n              <input\r\n                type='text'\r\n                placeholder='Email *'\r\n                value={this.state.email}\r\n                onChange={(event) => this.editChangeHandler(event, 'email')}\r\n              />\r\n              <input\r\n                type='text'\r\n                placeholder='Phone *'\r\n                value={this.state.phone}\r\n                onChange={(event) => this.editChangeHandler(event, 'phone')}\r\n              />\r\n              <div className='addProvider'>\r\n                <input\r\n                  type='text'\r\n                  placeholder='Providers'\r\n                  value={this.state.newProvider}\r\n                  onChange={(event) => this.editChangeHandler(event, 'newProvider')}\r\n                />\r\n                <Button\r\n                  onClick={this.addProvider}\r\n                >Add provider</Button>\r\n              </div>\r\n            </div>\r\n            <div className='providerList'>\r\n              {\r\n                this.props.providerList.map((provider) => {\r\n                  return (\r\n                    <ProviderList\r\n                      provider={provider}\r\n                      checkedProvider={this.state.providers.map((checked => checked.name))}\r\n                      handleCheck={this.handleCheck}\r\n                    />\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <div className='btns'>\r\n            <Button variant=\"danger\"\r\n              onClick={this.toggleConfirm}\r\n            >\r\n              Delete Client\r\n              </Button>\r\n              <div>\r\n            <Button \r\n           \r\n              onClick={this.props.onClose}>\r\n              Cancel\r\n              </Button>\r\n            <Button \r\n              onClick={this.editClient}\r\n            >\r\n              Edit Client\r\n             </Button>\r\n             </div>\r\n             </div>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        {\r\n          this.state.showConfirm &&\r\n          <Confirm\r\n            handleClose={this.toggleConfirm}\r\n            removeClient={this.removeClient} />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    providerList: state.providerList,\r\n    errorMessage:state.errorMessage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addProvider,\r\n  editClient,\r\n  removeClient\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditClientModal)","import React, { useState } from 'react'\r\nimport './Search.scss'\r\nimport Select from 'react-select'\r\nimport { FormControl, InputGroup, Button } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux'\r\nimport { getClients } from '../../store/actions'\r\n\r\nfunction Search(props) {\r\n\r\n    const sortOptions = [\r\n        {\r\n            label: 'A-Z',\r\n            value: 'a-z'\r\n        },\r\n\r\n        {\r\n            label: 'Z-A',\r\n            value: 'z-a'\r\n        }\r\n    ]\r\n\r\n    let [search, setSearch] = useState('')\r\n    let [sort, setSort] = useState('')\r\n\r\n\r\n    const handleSubmit = () => {\r\n        const data = {};\r\n        if (search) data.search = search;\r\n        if (sort) data.sort = sort;\r\n        props.getClients(data)\r\n    }\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            handleSubmit()\r\n        }\r\n    }\r\n\r\n    const sortHandleChange = (e) => {\r\n        if (e) {\r\n            setSort(e.value)\r\n            const data = { sort: e.value }\r\n            props.getClients(data)\r\n\r\n        } else {\r\n            setSort('')\r\n            props.getClients()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='advanced'>\r\n            <div className='search'>\r\n                <InputGroup className=\"mb-3\">\r\n                    <FormControl\r\n                        placeholder=\"Search\"\r\n                        aria-label=\"Recipient's username\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        onChange={(event) => setSearch(event.target.value)}\r\n                        onKeyDown={handleKeyDown}\r\n                    />\r\n                    <InputGroup.Append>\r\n                        <Button\r\n                            onClick={handleSubmit}\r\n                            variant=\"outline-primary\"><FontAwesomeIcon icon={faSearch} color='#210794' /></Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </div>\r\n            <div className='sort'>\r\n                <Select\r\n                    placeholder='Sort'\r\n                    options={sortOptions}\r\n                    isClearable={true}\r\n                    isSearchable={false}\r\n                    onChange={sortHandleChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    getClients\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Search)","import React from 'react'\r\nimport './Clients.scss'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport AddClient from '../addClient/AddClient'\r\nimport { connect } from 'react-redux'\r\nimport { getClients, getProviders } from '../../store/actions'\r\nimport EditClientModal from '../editClientModal/EditClientModal'\r\nimport Search from '../search/Search'\r\n\r\n\r\n\r\nclass Clients extends React.PureComponent {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            openNewClientModal: false,\r\n            editClient: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getClients()\r\n    }\r\n\r\n    toggleNewClientModal = () => {\r\n        this.setState({\r\n            openNewClientModal: !this.state.openNewClientModal,\r\n        })\r\n    }\r\n    openNewClientModal = () => {\r\n        this.props.getProviders()\r\n        this.setState({\r\n            openNewClientModal: !this.state.openNewClientModal,\r\n        })\r\n    }\r\n\r\n    toggleEdit = (client) => {\r\n        this.props.getProviders()\r\n        this.setState({\r\n            editClient: client\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { clientList } = this.props\r\n        return (\r\n            <div className='back'>\r\n                <Search /> \r\n                <Table striped bordered hover >\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"5\">\r\n                                <div className='clientHeader'>\r\n                                    <h4>Clients</h4>\r\n                                    <Button\r\n                                        onClick={this.openNewClientModal}\r\n                                    >New Client\r\n                                 </Button>\r\n                                </div>\r\n                            </th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone</th>\r\n                            <th>Providers</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            clientList.map((client) => {\r\n                                return (\r\n                                    <tr key={client._id}>\r\n                                        <td>{client.name}</td>\r\n                                        <td>{client.email}</td>\r\n                                        <td>{client.phone}</td>\r\n                                        <td>{client.providers.map(p => p.name).join(', ')}\r\n                                        </td>\r\n                                        <td>\r\n                                            <Button\r\n                                                onClick={() => this.toggleEdit(client)}\r\n                                            >Edit\r\n                                 </Button></td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </Table>\r\n           \r\n                {\r\n                    this.state.openNewClientModal &&\r\n                    <AddClient\r\n                        onClose={this.toggleNewClientModal}\r\n                        providers={this.props.providerList}\r\n\r\n                    />\r\n                }\r\n                {\r\n                    this.state.editClient &&\r\n                    <EditClientModal\r\n                        client={this.state.editClient}\r\n                        onClose={() => this.toggleEdit(null)}\r\n                    />\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        clientList: state.clientList,\r\n        addClientSuccess: state.addClientSuccess,\r\n        editClientSuccess: state.editClientSuccess,\r\n        providerList: state.providerList\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getClients,\r\n    getProviders\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Clients)","import React from 'react'\r\nimport  './Spinner.scss'\r\n\r\n\r\nconst Spinner = () => {\r\n    \r\n    return (\r\n        <div className='loader'></div>\r\n    )\r\n}\r\n\r\nexport default Spinner","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Clients from './components/clients/Clients';\nimport Spinner from './components/spinner/Spinner';\nimport { connect } from 'react-redux';\n\n\n\nfunction App(props) {\n\n  if (props.errorMessage) {\n    toast.error(props.errorMessage)\n  }\n  if (props.successMessage) {\n    toast.success(props.successMessage)\n  }\n  return (\n    <div className=\"App\">\n      <Clients />\n      <ToastContainer\n        position=\"bottom-left\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      {props.loading && <Spinner />}\n    </div>\n\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    errorMessage: state.errorMessage,\n    successMessage: state.successMessage,\n    loading: state.loading\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from './actionTypes'\r\n\r\n\r\n\r\nconst defaultState = {\r\n    clientList: [],\r\n    providerList: [],\r\n    client: null,\r\n    errorMessage: '',\r\n    successMessage: '',\r\n    loading: false,\r\n    addClientSuccess: false,\r\n    editClientSuccess: false,\r\n    editProviderSuccess: false,\r\n    addProviderSuccess: false\r\n}\r\nconst reducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                addClientSuccess: false,\r\n                editClientSuccess: false,\r\n                errorMessage: '',\r\n                successMessage: ''\r\n            }\r\n        case \"ERROR\":\r\n            return {\r\n                ...state,\r\n                errorMessage: '❌❌❌ ' + action.errorMessage,\r\n                loading: false,\r\n            }\r\n        case actionTypes.GET_CLIENTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                clientList: action.clientList,\r\n                loading: false,\r\n            }\r\n        case actionTypes.GET_PROVIDERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                providerList: action.providerList,\r\n                loading: false,\r\n            }\r\n\r\n        case actionTypes.ADD_PROVIDER_SUCCESS: {\r\n            let providers = [...state.providerList, action.provider]\r\n            return {\r\n                ...state,\r\n                providerList: providers,\r\n                loading: false,\r\n                successMessage: '✅✅✅ Provider added successfully!!!',\r\n                addProviderSuccess: true\r\n            }\r\n        }\r\n        case actionTypes.ADD_CLIENT_SUCCESS: {\r\n            let clients = [...state.clientList, action.client]\r\n            return {\r\n                ...state,\r\n                clientList: clients,\r\n                loading: false,\r\n                successMessage: '✅✅✅ Client added successfully!!!',\r\n                addClientSuccess: true\r\n            }\r\n        }\r\n        case actionTypes.REMOVE_PROVIDER_SUCCESS: {\r\n            const newProviders = state.providerList.filter((item) => item._id !== action.provider._id)\r\n            const client = state.clientList.map(client => client.providers)\r\n            for (let i = 0; i < client.length; i++) {\r\n                const boolArr = client[i].map(prov => prov._id === action.provider._id)\r\n                const index = boolArr.indexOf(true)\r\n                if (index !== -1) {\r\n                    state.clientList[i].providers.splice(index, 1)\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                providerList: newProviders,\r\n                clientList: [...state.clientList],\r\n                loading: false,\r\n                successMessage: '🗑🗑🗑 Provider deleted successfully!!!',\r\n            }\r\n        }\r\n        case actionTypes.REMOVE_CLIENT_SUCCESS: {\r\n            const newClients = state.clientList.filter((client) => client._id !== action.id)\r\n            return {\r\n                ...state,\r\n                clientList: newClients,\r\n                loading: false,\r\n                successMessage: '🗑🗑🗑 Client deleted successfully!!!',\r\n            }\r\n        }\r\n\r\n        case actionTypes.EDIT_CLIENT_SUCCESS: {\r\n            let clients = [...state.clientList];\r\n            let newClientIndex = clients.findIndex((client) => client._id === action.client._id);\r\n            clients[newClientIndex] = action.client;\r\n            return {\r\n                ...state,\r\n                clientList: clients,\r\n                loading: false,\r\n                successMessage: '🖍🖍🖍 Client edited successfully!!!',\r\n                editClientSuccess: true,\r\n            }\r\n        }\r\n        case actionTypes.EDIT_PROVIDER_SUCCESS: {\r\n            const providers = [...state.providerList];\r\n            const newProviderIndex = providers.findIndex((p) => p._id === action.provider._id);\r\n            providers[newProviderIndex] = action.provider;\r\n            const client = state.clientList.map(client => client.providers)\r\n            for (let i = 0; i < client.length; i++) {\r\n                const boolArr = client[i].map(prov => prov._id === action.provider._id)\r\n                const index = boolArr.indexOf(true)\r\n                if (index !== -1) {\r\n                    state.clientList[i].providers[index] = action.provider\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                providerList: providers,\r\n                loading: false,\r\n                successMessage: '🖍🖍🖍 Provider edited successfully!!!',\r\n                editProviderSuccess: true,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport { reducer }","import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './reducer';\r\n\r\nconst middlewareArr = [thunk];\r\nif(process.env.NODE_ENV === 'development'){\r\n    middlewareArr.push(logger)\r\n}\r\n\r\nconst middleware = applyMiddleware(...middlewareArr)\r\nexport const store = createStore(reducer,middleware)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport { store } from './store/store';\n\nReactDOM.render(\n     <Provider store = {store}>\n    <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}