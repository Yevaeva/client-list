{"version":3,"sources":["helperFunc/request.js","store/actions.js","store/actionTypes.js","components/providerList/ProviderList.js","helperFunc/validation.js","components/addClient/AddClient.js","components/confirm/Confirm.js","components/editClientModal/EditClientModal.js","components/search/Search.js","components/clients/Clients.js","components/spinner/Spinner.js","App.js","reportWebVitals.js","store/reducer.js","store/store.js","index.js"],"names":["request","apiUrl","url","method","body","config","headers","JSON","stringify","fetch","then","res","json","response","error","ERROR","LOADING","GET_CLIENTS_SUCCESS","GET_PROVIDERS_SUCCESS","ADD_PROVIDER_SUCCESS","ADD_CLIENT_SUCCESS","EDIT_CLIENT_SUCCESS","EDIT_PROVIDER_SUCCESS","REMOVE_PROVIDER_SUCCESS","REMOVE_CLIENT_SUCCESS","getClients","data","query","key","dispatch","type","actionTypes","clientList","catch","errorMessage","message","addProvider","provider","ProviderList","state","checkbox","edit","inputValue","props","name","handleCheck","e","setState","handleKeyDown","event","_id","editProvider","this","checkedProvider","includes","className","id","onChange","checked","OverlayTrigger","trigger","placement","overlay","Tooltip","value","target","onKeyDown","htmlFor","onClick","icon","faEdit","color","removeProvider","faTrash","React","Component","mapDispatchToProps","editedProvider","connect","providerList","validationMessages","clientAddValidationSchema","Yup","shape","required","phone","matches","email","AddClient","handleChange","selectedProviders","Set","has","delete","add","newProvider","reapeted","find","prov","trim","undefined","toast","addClient","values","providers","map","p","onClose","inputRef","createRef","current","focus","Modal","dialogClassName","centered","show","onHide","Header","closeButton","Title","initialValues","validationSchema","onSubmit","handleBlur","handleSubmit","touched","errors","Body","ref","placeholder","onBlur","Form","Text","Button","Footer","variant","PureComponent","client","Confirm","handleClose","removeClient","EditClientModal","editChangeHandler","editClient","test","toggleConfirm","showConfirm","editedClient","useState","search","setSearch","sort","setSort","InputGroup","FormControl","aria-label","aria-describedby","Append","faSearch","options","label","isClearable","isSearchable","Clients","toggleNewClientModal","openNewClientModal","getProviders","toggleEdit","Table","striped","bordered","hover","colSpan","join","addClientSuccess","editClientSuccess","Spinner","successMessage","loading","success","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","editProviderSuccess","addProviderSuccess","middlewareArr","thunk","middleware","applyMiddleware","store","createStore","action","clients","newProviders","filter","item","i","length","boolArr","index","indexOf","splice","newClients","newClientIndex","findIndex","newProviderIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.135a202e.chunk.js","sourcesContent":["\r\nfunction request(url, method = \"GET\", body) {\r\n    let config =\r\n    {\r\n      method: method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n    }\r\n    if (body) {\r\n      config.body = JSON.stringify(body)\r\n    }\r\n    return fetch(url, config)\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        if (response.error) {\r\n          throw response.error\r\n        }\r\n        return response\r\n      })\r\n  }\r\n  \r\n  export default request","import request from \"../helperFunc/request\"\r\nimport * as actionTypes from './actionTypes'\r\n\r\n\r\nlet apiUrl \r\nif (process.env.NODE_ENV === 'development') {\r\n    apiUrl = process.env.REACT_APP_API_URL\r\n} else {\r\n    apiUrl = 'https://client-list-api.herokuapp.com'\r\n}\r\n\r\n\r\nexport const getClients = (data = {}) => {\r\n    let url = `${apiUrl}/client`;\r\n    let query = '?';\r\n    for (let key in data) {\r\n        query = `?${key}=${data[key]}&`\r\n    }\r\n    if (query === '?') query = ''\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(url + query)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.GET_CLIENTS_SUCCESS, clientList: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const getProviders = () => {\r\n\r\n    let url = `${apiUrl}/provider`;\r\n\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(url)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.GET_PROVIDERS_SUCCESS, providerList: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addProvider = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider`, \"POST\", data)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.ADD_PROVIDER_SUCCESS, provider: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\nexport const addClient = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client`, \"POST\", data)\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.ADD_CLIENT_SUCCESS, client: res })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\nexport const editClient = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client/${data._id}`, \"PUT\", data)\r\n            .then((editedClient) => {\r\n                dispatch({ type: actionTypes.EDIT_CLIENT_SUCCESS, client: editedClient })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const editProvider = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider/${data._id}`, \"PUT\", data)\r\n            .then((editedProvider) => {\r\n                dispatch({ type: actionTypes.EDIT_PROVIDER_SUCCESS, provider: editedProvider })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeProvider = (provider) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/provider/${provider._id}`, \"DELETE\")\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.REMOVE_PROVIDER_SUCCESS, provider })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const removeClient = (id) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: actionTypes.LOADING })\r\n        request(`${apiUrl}/client/${id}`, \"DELETE\")\r\n            .then(res => {\r\n                dispatch({ type: actionTypes.REMOVE_CLIENT_SUCCESS, id })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({ type: actionTypes.ERROR, errorMessage: error.message })\r\n            })\r\n    }\r\n\r\n}","export const ERROR = \"ERROR\";\r\nexport const LOADING = \"LOADING\";\r\nexport const GET_CLIENTS_SUCCESS = \"GET_CLIENTS_SUCCESS\";\r\nexport const GET_PROVIDERS_SUCCESS = \"GET_PROVIDERS_SUCCESS\";\r\nexport const ADD_PROVIDER_SUCCESS = 'ADD_PROVIDER_SUCCESS';\r\nexport const ADD_CLIENT_SUCCESS = 'ADD_CLIENT_SUCCESS';\r\nexport const EDIT_CLIENT_SUCCESS = 'EDIT_CLIENT_SUCCESS';\r\nexport const EDIT_PROVIDER_SUCCESS = 'EDIT_PROVIDER_SUCCESS';\r\nexport const REMOVE_PROVIDER_SUCCESS = 'REMOVE_PROVIDER_SUCCESS';\r\nexport const REMOVE_CLIENT_SUCCESS = 'REMOVE_CLIENT_SUCCESS'\r\n","import React from \"react\";\r\nimport \"./ProviderList.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { editProvider, getClients, removeProvider } from \"../../store/actions\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nclass ProviderList extends React.Component {\r\n  state = {\r\n    checkbox: false,\r\n    edit: false,\r\n    inputValue: this.props.provider.name,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (\r\n      this.props.checkedProvider &&\r\n      this.props.checkedProvider.includes(this.props.provider.name)\r\n    ) {\r\n      this.setState({\r\n        checkbox: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        checkbox: false,\r\n      });\r\n    }\r\n  }\r\n  handleCheck = (e) => {\r\n    this.props.handleCheck(e);\r\n    this.setState({\r\n      checkbox: !this.state.checkbox,\r\n    });\r\n  };\r\n\r\n  handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      const data = {\r\n        name: this.state.inputValue,\r\n        _id: this.props.provider._id,\r\n      };\r\n      this.props.editProvider(data);\r\n      this.setState({\r\n        edit: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { provider } = this.props;\r\n\r\n    return (\r\n      <div className=\"provWrapper\" key={provider._id}>\r\n        <div className=\"provName\">\r\n          <input\r\n            name={provider.name}\r\n            type=\"checkbox\"\r\n            id={provider.name}\r\n            onChange={(e) => this.handleCheck(e)}\r\n            checked={this.state.checkbox}\r\n          />\r\n          {this.state.edit ? (\r\n            <>\r\n              <OverlayTrigger\r\n                trigger=\"focus\"\r\n                placement=\"right-start\"\r\n                overlay={\r\n                  <Tooltip id={`tooltip-bottom-start`}>\r\n                    Press Enter to save provider name.\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <input\r\n                  className=\"editInput\"\r\n                  type=\"text\"\r\n                  value={this.state.inputValue}\r\n                  onChange={(e) =>\r\n                    this.setState({ inputValue: e.target.value })\r\n                  }\r\n                  onKeyDown={this.handleKeyDown}\r\n                />\r\n              </OverlayTrigger>\r\n            </>\r\n          ) : (\r\n            <label htmlFor={provider.name}>{provider.name}</label>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <button onClick={() => this.setState({ edit: !this.state.edit })}>\r\n            <FontAwesomeIcon icon={faEdit} color=\"#210794\" />\r\n          </button>\r\n          <button onClick={() => this.props.removeProvider(provider)}>\r\n            <FontAwesomeIcon icon={faTrash} color=\"#ce0f0f\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    providerList: state.providerList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  editProvider,\r\n  removeProvider,\r\n  getClients,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProviderList);\r\n","import * as Yup from \"yup\";\r\n\r\n// patterns\r\nexport const phonePattern = /^(([+374]{4}|[0]{1}))?([1-9]{2})(\\d{6})$/;\r\n// messages\r\nexport const validationMessages = {\r\n  required: \"Required field!\",\r\n  emailFormat: \"Invalid email address!\",\r\n  phoneFormat: \"Invalid phone number!\",\r\n};\r\n\r\n//Yup schemas\r\nexport const clientAddValidationSchema = Yup.object().shape({\r\n  name: Yup.string().required(validationMessages.required),\r\n  phone: Yup.string()\r\n    .matches(phonePattern, validationMessages.phoneFormat)\r\n    .required(validationMessages.required),\r\n  email: Yup.string()\r\n    .email(validationMessages.emailFormat)\r\n    .required(validationMessages.required),\r\n});\r\n","import React, { createRef } from \"react\";\r\nimport \"./AddClient.scss\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { addClient, addProvider } from \"../../store/actions\";\r\nimport { toast } from \"react-toastify\";\r\nimport ProviderList from \"../providerList/ProviderList\";\r\nimport { Formik } from \"formik\";\r\nimport { clientAddValidationSchema } from \"../../helperFunc/validation\";\r\nclass AddClient extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = createRef();\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      newProvider: \"\",\r\n      selectedProviders: new Set(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  handleChange = (event, type) => {\r\n    this.setState({\r\n      [type]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheck = (e) => {\r\n    const selectedProviders = new Set(this.state.selectedProviders);\r\n    if (selectedProviders.has(e.target.name)) {\r\n      selectedProviders.delete(e.target.name);\r\n    } else {\r\n      selectedProviders.add(e.target.name);\r\n    }\r\n    this.setState({\r\n      selectedProviders,\r\n    });\r\n  };\r\n\r\n  addProvider = () => {\r\n    let { newProvider } = this.state;\r\n    let { providerList } = this.props;\r\n    let reapeted = providerList.find((prov) => {\r\n      return prov.name === newProvider;\r\n    });\r\n\r\n    if (newProvider.trim() && reapeted === undefined) {\r\n      this.props.addProvider({ name: this.state.newProvider.trim() });\r\n      this.setState({\r\n        newProvider: \"\",\r\n      });\r\n    } else if (reapeted) {\r\n      toast.error(\"Provider must be unique ❗❗❗\");\r\n    }\r\n  };\r\n\r\n  addClient = (values) => {\r\n    const providers = [...this.state.selectedProviders].map((p) => {\r\n      return { name: p };\r\n    });\r\n    const data = {\r\n      name: values.name,\r\n      email: values.email,\r\n      phone: +values.phone,\r\n      providers,\r\n    };\r\n    this.props.addClient(data);\r\n    this.props.onClose();\r\n  };\r\n  render() {\r\n    const { onClose } = this.props;\r\n    return (\r\n      <div>\r\n        <Modal dialogClassName=\"size\" centered show={true} onHide={onClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add new Client</Modal.Title>\r\n          </Modal.Header>\r\n          <Formik\r\n            initialValues={{\r\n              name: \"\",\r\n              email: \"\",\r\n              phone: \"\",\r\n            }}\r\n            validationSchema={clientAddValidationSchema}\r\n            onSubmit={(values) => this.addClient(values)}\r\n          >\r\n            {({\r\n              values,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              touched,\r\n              errors,\r\n            }) => {\r\n              return (\r\n                <div>\r\n                  <Modal.Body>\r\n                    <div className=\"inputs\">\r\n                      <input\r\n                        ref={this.inputRef}\r\n                        type=\"text\"\r\n                        placeholder=\"Name *\"\r\n                        name=\"name\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.name}\r\n                      />\r\n                      <Form.Text\r\n                        className={\r\n                          touched.name && errors.name\r\n                            ? \"text-danger mx-3\"\r\n                            : \"d-none mx-3\"\r\n                        }\r\n                      >\r\n                        {errors.name}\r\n                      </Form.Text>\r\n                      <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email *\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                      <Form.Text\r\n                        className={\r\n                          touched.email && errors.email\r\n                            ? \"text-danger mx-3\"\r\n                            : \"d-none mx-3\"\r\n                        }\r\n                      >\r\n                        {errors.email}\r\n                      </Form.Text>\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Phone *\"\r\n                        name=\"phone\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.phone}\r\n                      />\r\n                      <Form.Text\r\n                        className={\r\n                          touched.phone && errors.phone\r\n                            ? \"text-danger mx-3\"\r\n                            : \"d-none mx-3\"\r\n                        }\r\n                      >\r\n                        {errors.phone}\r\n                      </Form.Text>\r\n                      <div className=\"addProvider\">\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Providers\"\r\n                          value={this.state.newProvider}\r\n                          onChange={(event) =>\r\n                            this.setState({\r\n                              newProvider: event.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                        <Button onClick={this.addProvider}>Add provider</Button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"providerList\">\r\n                      {this.props.providers.map((provider) => {\r\n                        return (\r\n                          <div key={provider._id}>\r\n                            <ProviderList\r\n                              provider={provider}\r\n                              handleCheck={this.handleCheck}\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button variant=\"danger\" className=\"butn\" onClick={onClose}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleSubmit}>\r\n                      Add Client\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </div>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    providerList: state.providerList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addProvider,\r\n  addClient,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddClient);\r\n","import { Modal, Button } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Confirm(props) {\r\n  return (\r\n    <Modal centered show={true} onHide={props.handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Are you sure you want to delete client?</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Footer>\r\n        <Button onClick={props.handleClose}>Close</Button>\r\n        <Button variant=\"danger\" onClick={props.removeClient}>\r\n          Delete\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nConfirm.propTypes = {\r\n  removeClient: PropTypes.func.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { addProvider, editClient, removeClient } from \"../../store/actions\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport ProviderList from \"../providerList/ProviderList\";\r\nimport Confirm from \"../confirm/Confirm\";\r\n\r\nclass EditClientModal extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = React.createRef();\r\n    this.state = {\r\n      ...this.props.client,\r\n      showConfirm: false,\r\n      selectedProviders: new Set(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n    this.setState({\r\n      selectedProviders: new Set([\r\n        ...this.state.providers.map((checked) => checked.name),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  editChangeHandler = (event, type) => {\r\n    this.setState({\r\n      [type]: event.target.value,\r\n    });\r\n  };\r\n\r\n  addProvider = () => {\r\n    let { newProvider } = this.state;\r\n    let { providerList } = this.props;\r\n    let reapeted = providerList.find((prov) => {\r\n      return prov.name === newProvider;\r\n    });\r\n\r\n    if (newProvider.trim() && reapeted === undefined) {\r\n      this.props.addProvider({ name: this.state.newProvider.trim() });\r\n      this.setState({\r\n        newProvider: \"\",\r\n      });\r\n    } else if (reapeted) {\r\n      toast.error(\"Provider must be unique ❗❗❗\");\r\n    }\r\n  };\r\n\r\n  handleCheck = (e) => {\r\n    const selectedProviders = new Set(this.state.selectedProviders);\r\n    if (selectedProviders.has(e.target.name)) {\r\n      selectedProviders.delete(e.target.name);\r\n    } else {\r\n      selectedProviders.add(e.target.name);\r\n    }\r\n\r\n    this.setState({\r\n      selectedProviders,\r\n    });\r\n  };\r\n\r\n  editClient = () => {\r\n    let { email, name, phone } = this.state;\r\n\r\n    if (!email || !name || !phone) {\r\n      toast.error(\"All fields marked with * are required ❗❗❗\");\r\n      return;\r\n    }\r\n    const regexp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    const reg = /^\\d+$/;\r\n\r\n    if (email && !regexp.test(email)) {\r\n      toast.error(\"Write valid email address ❗❗❗\");\r\n      return;\r\n    } else if (phone && !reg.test(phone)) {\r\n      toast.error(\"Phone must contain only numbers ❗❗❗\");\r\n      return;\r\n    } else if (!name || !email || !phone) {\r\n      toast.error(\"All fields marked with * are required ❗❗❗\");\r\n      return;\r\n    }\r\n\r\n    const providers = [...this.state.selectedProviders].map((p) => {\r\n      return { name: p };\r\n    });\r\n    const data = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      phone: this.state.phone,\r\n      _id: this.state._id,\r\n      providers,\r\n    };\r\n    this.props.editClient(data);\r\n\r\n    this.props.onClose();\r\n  };\r\n\r\n  toggleConfirm = () => {\r\n    this.setState({\r\n      showConfirm: !this.state.showConfirm,\r\n    });\r\n  };\r\n\r\n  removeClient = () => {\r\n    this.props.removeClient(this.state._id);\r\n    this.toggleConfirm();\r\n    this.props.onClose();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal centered show={true} onHide={this.props.onClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Edit Client</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"inputs\">\r\n              <input\r\n                ref={this.inputRef}\r\n                type=\"text\"\r\n                placeholder=\"Name *\"\r\n                value={this.state.name}\r\n                onChange={(event) => this.editChangeHandler(event, \"name\")}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Email *\"\r\n                value={this.state.email}\r\n                onChange={(event) => this.editChangeHandler(event, \"email\")}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Phone *\"\r\n                value={this.state.phone}\r\n                onChange={(event) => this.editChangeHandler(event, \"phone\")}\r\n              />\r\n              <div className=\"addProvider\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Providers\"\r\n                  value={this.state.newProvider}\r\n                  onChange={(event) =>\r\n                    this.editChangeHandler(event, \"newProvider\")\r\n                  }\r\n                />\r\n                <Button onClick={this.addProvider}>Add provider</Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"providerList\">\r\n              {this.props.providerList.map((provider) => {\r\n                return (\r\n                  <ProviderList\r\n                    provider={provider}\r\n                    checkedProvider={this.state.providers.map(\r\n                      (checked) => checked.name\r\n                    )}\r\n                    handleCheck={this.handleCheck}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <div className=\"btns\">\r\n              <Button variant=\"danger\" onClick={this.toggleConfirm}>\r\n                Delete Client\r\n              </Button>\r\n              <div>\r\n                <Button onClick={this.props.onClose}>Cancel</Button>\r\n                <Button onClick={this.editClient}>Edit Client</Button>\r\n              </div>\r\n            </div>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        {this.state.showConfirm && (\r\n          <Confirm\r\n            handleClose={this.toggleConfirm}\r\n            removeClient={this.removeClient}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    providerList: state.providerList,\r\n    errorMessage: state.errorMessage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addProvider,\r\n  editClient,\r\n  removeClient,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditClientModal);\r\n","import React, { useState } from \"react\";\r\nimport \"./Search.scss\";\r\nimport Select from \"react-select\";\r\nimport { FormControl, InputGroup, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { getClients } from \"../../store/actions\";\r\n\r\nfunction Search(props) {\r\n  const sortOptions = [\r\n    {\r\n      label: \"A-Z\",\r\n      value: \"a-z\",\r\n    },\r\n\r\n    {\r\n      label: \"Z-A\",\r\n      value: \"z-a\",\r\n    },\r\n  ];\r\n\r\n  let [search, setSearch] = useState(\"\");\r\n  let [sort, setSort] = useState(\"\");\r\n\r\n  const handleSubmit = () => {\r\n    const data = {};\r\n    if (search) data.search = search;\r\n    if (sort) data.sort = sort;\r\n    props.getClients(data);\r\n  };\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const sortHandleChange = (e) => {\r\n    if (e) {\r\n      setSort(e.value);\r\n      const data = { sort: e.value };\r\n      props.getClients(data);\r\n    } else {\r\n      setSort(\"\");\r\n      props.getClients();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"advanced\">\r\n      <div className=\"search\">\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Search\"\r\n            aria-label=\"Recipient's username\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(event) => setSearch(event.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button onClick={handleSubmit} variant=\"outline-primary\">\r\n              <FontAwesomeIcon icon={faSearch} color=\"#210794\" />\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n      <div className=\"sort\">\r\n        <Select\r\n          placeholder=\"Sort\"\r\n          options={sortOptions}\r\n          isClearable={true}\r\n          isSearchable={false}\r\n          onChange={sortHandleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getClients,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Search);\r\n","import React from \"react\";\r\nimport \"./Clients.scss\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport AddClient from \"../addClient/AddClient\";\r\nimport { connect } from \"react-redux\";\r\nimport { getClients, getProviders } from \"../../store/actions\";\r\nimport EditClientModal from \"../editClientModal/EditClientModal\";\r\nimport Search from \"../search/Search\";\r\n\r\nclass Clients extends React.PureComponent {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      openNewClientModal: false,\r\n      editClient: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getClients();\r\n  }\r\n\r\n  toggleNewClientModal = () => {\r\n    this.setState({\r\n      openNewClientModal: !this.state.openNewClientModal,\r\n    });\r\n  };\r\n  openNewClientModal = () => {\r\n    this.props.getProviders();\r\n    this.setState({\r\n      openNewClientModal: !this.state.openNewClientModal,\r\n    });\r\n  };\r\n\r\n  toggleEdit = (client) => {\r\n    this.props.getProviders();\r\n    this.setState({\r\n      editClient: client,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { clientList } = this.props;\r\n    return (\r\n      <div className=\"back\">\r\n        <Search />\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"5\">\r\n                <div className=\"clientHeader\">\r\n                  <h4>Clients</h4>\r\n                  <Button onClick={this.openNewClientModal}>New Client</Button>\r\n                </div>\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n              <th>Providers</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {clientList.map((client) => {\r\n              return (\r\n                <tr key={client._id}>\r\n                  <td>{client.name}</td>\r\n                  <td>{client.email}</td>\r\n                  <td>{client.phone}</td>\r\n                  <td>{client.providers.map((p) => p.name).join(\", \")}</td>\r\n                  <td>\r\n                    <Button onClick={() => this.toggleEdit(client)}>\r\n                      Edit\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n\r\n        {this.state.openNewClientModal && (\r\n          <AddClient\r\n            onClose={this.toggleNewClientModal}\r\n            providers={this.props.providerList}\r\n          />\r\n        )}\r\n        {this.state.editClient && (\r\n          <EditClientModal\r\n            client={this.state.editClient}\r\n            onClose={() => this.toggleEdit(null)}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clientList: state.clientList,\r\n    addClientSuccess: state.addClientSuccess,\r\n    editClientSuccess: state.editClientSuccess,\r\n    providerList: state.providerList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getClients,\r\n  getProviders,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Clients);\r\n","import React from \"react\";\r\nimport \"./Spinner.scss\";\r\n\r\nconst Spinner = () => {\r\n  return <div className=\"loader\"></div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Clients from './components/clients/Clients';\r\nimport Spinner from './components/spinner/Spinner';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nfunction App(props) {\r\n\r\n  if (props.errorMessage) {\r\n    toast.error(props.errorMessage)\r\n  }\r\n  if (props.successMessage) {\r\n    toast.success(props.successMessage)\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <Clients />\r\n      <ToastContainer\r\n        position=\"bottom-left\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      {props.loading && <Spinner />}\r\n    </div>\r\n\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errorMessage: state.errorMessage,\r\n    successMessage: state.successMessage,\r\n    loading: state.loading\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as actionTypes from './actionTypes'\r\n\r\n\r\n\r\nconst defaultState = {\r\n    clientList: [],\r\n    providerList: [],\r\n    client: null,\r\n    errorMessage: '',\r\n    successMessage: '',\r\n    loading: false,\r\n    addClientSuccess: false,\r\n    editClientSuccess: false,\r\n    editProviderSuccess: false,\r\n    addProviderSuccess: false\r\n}\r\nconst reducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                addClientSuccess: false,\r\n                editClientSuccess: false,\r\n                errorMessage: '',\r\n                successMessage: ''\r\n            }\r\n        case \"ERROR\":\r\n            return {\r\n                ...state,\r\n                errorMessage: '❌❌❌ ' + action.errorMessage,\r\n                loading: false,\r\n            }\r\n        case actionTypes.GET_CLIENTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                clientList: action.clientList,\r\n                loading: false,\r\n            }\r\n        case actionTypes.GET_PROVIDERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                providerList: action.providerList,\r\n                loading: false,\r\n            }\r\n\r\n        case actionTypes.ADD_PROVIDER_SUCCESS: {\r\n            let providers = [...state.providerList, action.provider]\r\n            return {\r\n                ...state,\r\n                providerList: providers,\r\n                loading: false,\r\n                successMessage: '✅✅✅ Provider added successfully!!!',\r\n                addProviderSuccess: true\r\n            }\r\n        }\r\n        case actionTypes.ADD_CLIENT_SUCCESS: {\r\n            let clients = [...state.clientList, action.client]\r\n            return {\r\n                ...state,\r\n                clientList: clients,\r\n                loading: false,\r\n                successMessage: '✅✅✅ Client added successfully!!!',\r\n                addClientSuccess: true\r\n            }\r\n        }\r\n        case actionTypes.REMOVE_PROVIDER_SUCCESS: {\r\n            const newProviders = state.providerList.filter((item) => item._id !== action.provider._id)\r\n            const client = state.clientList.map(client => client.providers)\r\n            for (let i = 0; i < client.length; i++) {\r\n                const boolArr = client[i].map(prov => prov._id === action.provider._id)\r\n                const index = boolArr.indexOf(true)\r\n                if (index !== -1) {\r\n                    state.clientList[i].providers.splice(index, 1)\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                providerList: newProviders,\r\n                clientList: [...state.clientList],\r\n                loading: false,\r\n                successMessage: '🗑🗑🗑 Provider deleted successfully!!!',\r\n            }\r\n        }\r\n        case actionTypes.REMOVE_CLIENT_SUCCESS: {\r\n            const newClients = state.clientList.filter((client) => client._id !== action.id)\r\n            return {\r\n                ...state,\r\n                clientList: newClients,\r\n                loading: false,\r\n                successMessage: '🗑🗑🗑 Client deleted successfully!!!',\r\n            }\r\n        }\r\n\r\n        case actionTypes.EDIT_CLIENT_SUCCESS: {\r\n            let clients = [...state.clientList];\r\n            let newClientIndex = clients.findIndex((client) => client._id === action.client._id);\r\n            clients[newClientIndex] = action.client;\r\n            return {\r\n                ...state,\r\n                clientList: clients,\r\n                loading: false,\r\n                successMessage: '🖍🖍🖍 Client edited successfully!!!',\r\n                editClientSuccess: true,\r\n            }\r\n        }\r\n        case actionTypes.EDIT_PROVIDER_SUCCESS: {\r\n            const providers = [...state.providerList];\r\n            const newProviderIndex = providers.findIndex((p) => p._id === action.provider._id);\r\n            providers[newProviderIndex] = action.provider;\r\n            const client = state.clientList.map(client => client.providers)\r\n            for (let i = 0; i < client.length; i++) {\r\n                const boolArr = client[i].map(prov => prov._id === action.provider._id)\r\n                const index = boolArr.indexOf(true)\r\n                if (index !== -1) {\r\n                    state.clientList[i].providers[index] = action.provider\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                providerList: providers,\r\n                loading: false,\r\n                successMessage: '🖍🖍🖍 Provider edited successfully!!!',\r\n                editProviderSuccess: true,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport { reducer }","import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './reducer';\r\n\r\nconst middlewareArr = [thunk];\r\nif(process.env.NODE_ENV === 'development'){\r\n    middlewareArr.push(logger)\r\n}\r\n\r\nconst middleware = applyMiddleware(...middlewareArr)\r\nexport const store = createStore(reducer,middleware)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux'\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n     <Provider store = {store}>\r\n    <App />\r\n    </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}